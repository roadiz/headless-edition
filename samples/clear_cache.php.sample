<?php
declare(strict_types=1);

use RZ\Roadiz\Core\Events\Cache\CachePurgeAssetsRequestEvent;
use RZ\Roadiz\Core\Events\Cache\CachePurgeRequestEvent;
use RZ\Roadiz\Core\HttpFoundation\Request;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\HttpFoundation\JsonResponse;

require(dirname(__DIR__) . "/app/bootstrap.php");

$allowedIp = [
    '127.0.0.1', 'fe80::1', '::1', ':ffff:127.0.0.1', '::ffff:127.0.0.1' // localhost
];
if ($_SERVER['DEFAULT_GATEWAY']) {
    $allowedIp[] = $_SERVER['DEFAULT_GATEWAY'];
    $allowedIp[] = '::ffff:' . $_SERVER['DEFAULT_GATEWAY'];
}

// This check prevents access to debug front controllers that are deployed by accident to production servers.
// Feel free to remove this, extend it, or make something more sophisticated.
if (isset($_SERVER['HTTP_CLIENT_IP'])
    || !(in_array(@$_SERVER['REMOTE_ADDR'], $allowedIp) || php_sapi_name() === 'cli-server')
) {
    $response = new JsonResponse([
        'status' => 'fail',
        'error' => 'You are not allowed to access this file (' . $_SERVER['REMOTE_ADDR'] . ').',
    ], JsonResponse::HTTP_UNAUTHORIZED);
    $response->send();
    exit();
}

$request = Request::createFromGlobals();
if ($request->query->has('env') && $request->query->get('env') == 'preview') {
    $kernel = new AppKernel('prod', false, true);
} elseif ($request->query->has('env') && $request->query->get('env') == 'dev') {
    //$kernel = new DevAppKernel('dev', true, false, 'my_site');
    $kernel = new AppKernel('dev', true);
} else {
    $kernel = new AppKernel('prod', false);
}

$kernel->boot();
$kernel->getContainer()->offsetSet('request', $request);
$kernel->get('requestStack')->push($request);
/** @var EventDispatcher $dispatcher */
$dispatcher = $kernel->get('dispatcher');
$event = new CachePurgeRequestEvent($kernel);
$dispatcher->dispatch($event);
$dispatcher->dispatch(new CachePurgeAssetsRequestEvent($kernel));

$text = [
    'status' => 'ok',
    'trace' => $event->getMessages(),
    'errors' => $event->getErrors(),
];

$response = new JsonResponse($text);
$response->send();
