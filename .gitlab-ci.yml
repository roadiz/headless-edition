image: roadiz/php80-runner

stages:
    - test
    - build
    - deploy

variables:
    # Timezone will be used both for system and php date.timezone php.ini value
    TIMEZONE: "Europe/Paris"
    # SENTRY_URL: "https://sentry.yourdomain.com/api/hooks/release/builtin/x/xxxxx/"

example_test:
    stage: test
    image: roadiz/php80-runner
    interruptible: true
    only:
        - develop
        - tags
    cache:
        key: ${CI_COMMIT_REF_SLUG}
        paths:
            - vendor/
    script:
        - composer install --no-scripts
        - composer run-script post-install-cmd
        - vendor/bin/phpcs
        - vendor/bin/phpstan analyse -c phpstan.neon -l max src

example_build:
    stage: build
    image: roadiz/php80-runner
    interruptible: true
    only:
        - develop
        - tags
    cache:
        key: ${CI_COMMIT_REF_SLUG}
        paths:
            - vendor/
    artifacts:
        expire_in: 1 hour
        paths:
            - vendor/
            # Keep themes assets to include them in docker image
            - web/themes/
    before_script:
    # Paste the PRIVATE key into a gitlab variable.
    # Pay attention to the linebreak at the end when pasting
    # Composer private key is required if you need private dependencies.
    # **Uncomment only if using private composer packages**
    #- mkdir -p ~/.ssh
    #- echo "$COMPOSER_SERVER_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    #- chmod 600 ~/.ssh/id_rsa
    #- eval "$(ssh-agent -s)"
    #- ssh-add ~/.ssh/id_rsa
    ## Use your Gitlab instance URL
    #- ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
    script:
        # DO NOT USE --classmap-authoritative as we are going to generate nsentities on the goâ€¦
        - composer install --no-dev --optimize-autoloader --apcu-autoloader --no-scripts
        - composer run-script post-install-cmd
        # Create hard copies of theme assets
        - composer run-script pre-docker
        # No need to include dev entry points
        - rm -rf web/dev.php
        - rm -rf web/install.php

example_dev_docker:
    stage: deploy
    image: docker:git
    # Create a docker image only when a new tag is pushed
    only:
        - develop
    services:
        - docker:dind
    variables:
        DOCKER_DRIVER: overlay2
        DOCKER_TLS_CERTDIR: "/certs"
    when: on_success
    needs: ["example_build"]
    dependencies: ["example_build"]
    script:
        # Connect to your Gitlab Registry
        - "echo \"Registry image: ${CI_REGISTRY_IMAGE} for develop\""
        - "docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}"
        # App image build
        - "docker build -t ${CI_REGISTRY_IMAGE} ."
        - "docker tag ${CI_REGISTRY_IMAGE} ${CI_REGISTRY_IMAGE}:develop"
        - "docker push ${CI_REGISTRY_IMAGE}:develop"
        # Varnish image build
        - "docker build -t ${CI_REGISTRY_IMAGE}/varnish ./docker/varnish"
        - "docker tag ${CI_REGISTRY_IMAGE}/varnish ${CI_REGISTRY_IMAGE}/varnish:develop"
        - "docker push ${CI_REGISTRY_IMAGE}/varnish:develop"

#
# Build App docker image with vendor and built assets
# included. You must configure your Gitlab Runner to
# support Docker-in-docker commands.
#
example_docker:
    stage: deploy
    image: docker:git
    # Create a docker image only when a new tag is pushed
    only:
        - tags
    services:
        - docker:dind
    variables:
        DOCKER_DRIVER: overlay2
        DOCKER_TLS_CERTDIR: "/certs"
    when: on_success
    needs: ["example_build"]
    dependencies: ["example_build"]
    before_script:
        # Need curl for pushing release to Sentry
        - apk add curl
    script:
        # Connect to your Gitlab Registry
        - "echo \"Registry image: ${CI_REGISTRY_IMAGE} for tag ${CI_COMMIT_TAG}\""
        - "docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}"
        # App image build
        - "docker build -t ${CI_REGISTRY_IMAGE} ."
        - "docker tag ${CI_REGISTRY_IMAGE} ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
        - "docker push ${CI_REGISTRY_IMAGE}:latest"
        - "docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
        # Varnish image build
        - "docker build -t ${CI_REGISTRY_IMAGE}/varnish ./docker/varnish"
        - "docker tag ${CI_REGISTRY_IMAGE}/varnish ${CI_REGISTRY_IMAGE}/varnish:${CI_COMMIT_TAG}"
        - "docker push ${CI_REGISTRY_IMAGE}/varnish:latest"
        - "docker push ${CI_REGISTRY_IMAGE}/varnish:${CI_COMMIT_TAG}"
        # Create Release on your app on Sentry
        # - "curl ${SENTRY_URL} -X POST -H \"Content-Type: application/json\" -d \"{\\\"version\\\": \\\"${CI_COMMIT_TAG}\\\"}\""

