version: '3'
services:
    db:
        image: mysql:8.0
        networks:
            - default
        restart: unless-stopped
        volumes:
            - "db_data:/var/lib/mysql:delegated"
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}

    app:
        # Need to pass all vars to docker env for Crontab and supervisor scripts
        env_file: "./.env"
        restart: unless-stopped
        image: roadiz/headless-edition:develop
        depends_on:
            - db
            - solr
        volumes:
            # Need to persist config and keys
            - app_config:/var/www/app/conf
            - private_files:/var/www/html/files
            - public_files:/var/www/html/web/files
            - assets_files:/var/www/html/web/assets
            - gen_src:/var/www/html/app/gen-src/GeneratedNodeSources
            - proxies:/var/www/html/app/gen-src/Proxies
            - compiled:/var/www/html/app/gen-src/Compiled
        networks:
            - default
        environment:
            APP_CACHE: ${APP_CACHE}
            TRUSTED_PROXIES: ${TRUSTED_PROXIES}
            DEFAULT_GATEWAY: ${DEFAULT_GATEWAY}

    solr:
        image: solr:8-slim
        restart: unless-stopped
        volumes:
            - "solr_data:/var/solr:delegated"
        command:
            - solr-precreate
            - ${SOLR_CORE_NAME}
        networks:
            - default

    varnish:
        image: roadiz/varnish:develop
        tmpfs: /usr/local/var/varnish:exec
        restart: unless-stopped
        depends_on:
            - app
        links:
            - app:app
        networks:
            frontproxynet:
                aliases:
                    - ${APP_NAMESPACE}_varnish
            default:
        labels:
            - "traefik.enable=true"
            # Listen HTTP
            - "traefik.http.routers.${APP_NAMESPACE}.entrypoints=http"
            - "traefik.http.routers.${APP_NAMESPACE}.rule=Host(${HOSTNAME_VARNISH})"
            - "traefik.http.routers.${APP_NAMESPACE}.service=${APP_NAMESPACE}"
            # Listen HTTPS
            - "traefik.http.routers.${APP_NAMESPACE}-secure.entrypoints=https"
            - "traefik.http.routers.${APP_NAMESPACE}-secure.tls=true"
            - "traefik.http.routers.${APP_NAMESPACE}-secure.tls.certresolver=letsencrypt"
            - "traefik.http.routers.${APP_NAMESPACE}-secure.rule=Host(${HOSTNAME_VARNISH})"
            - "traefik.http.routers.${APP_NAMESPACE}-secure.service=${APP_NAMESPACE}"
            # Apply middlewares
            #- "traefik.http.routers.${APP_NAMESPACE}-secure.middlewares=${APP_NAMESPACE}Auth,${APP_NAMESPACE}Redirectregex"
            - "traefik.http.routers.${APP_NAMESPACE}.middlewares=${APP_NAMESPACE}Redirectscheme"
            # Define Middlewares
            # Add a Basic auth protection
            #- "traefik.http.middlewares.${APP_NAMESPACE}Auth.basicauth.users=${AUTH_BASIC}"
            # IP Whitelist
            #- "traefik.http.middlewares.${APP_NAMESPACE}Ipwhitelist.ipwhitelist.sourcerange=${IP_RANGE}"
            # Add domain redirection (${APP_NAMESPACE} non-www to www redir)
            #- "traefik.http.middlewares.${APP_NAMESPACE}Redirectregex.redirectregex.regex=${REDIRECT_REGEX}"
            #- "traefik.http.middlewares.${APP_NAMESPACE}Redirectregex.redirectregex.replacement=${REDIRECT_REPLACEMENT}"
            #- "traefik.http.middlewares.${APP_NAMESPACE}Redirectregex.redirectregex.permanent=true"
            # Add SSL redirection
            - "traefik.http.middlewares.${APP_NAMESPACE}Redirectscheme.redirectscheme.scheme=https"
            - "traefik.http.middlewares.${APP_NAMESPACE}Redirectscheme.redirectscheme.permanent=true"

    #   backup:
    #     image: ambroisemaupate/s3-backup
    #     networks:
    #       - default
    #     depends_on:
    #       - db
    #     environment:
    #       LOCAL_PATH: /var/www/html
    #       DB_USER: ${MYSQL_USER}
    #       DB_HOST: db
    #       DB_PASS: ${MYSQL_PASSWORD}
    #       DB_NAME: ${MYSQL_DATABASE}
    #       S3_ACCESS_KEY: ${S3_ACCESS_KEY}
    #       S3_SECRET_KEY: ${S3_SECRET_KEY}
    #       S3_SIGNATURE: ${S3_SIGNATURE}
    #       S3_BUCKET_LOCATION: ${S3_BUCKET_LOCATION}
    #       S3_HOST_BASE: ${S3_HOST_BASE}
    #       S3_HOST_BUCKET: ${S3_HOST_BUCKET}
    #       S3_BUCKET_NAME: ${S3_BUCKET_NAME}
    #       S3_FOLDER_NAME: ${S3_FOLDER_NAME}
    #     volumes:
    #       - private_files:/var/www/html/files:ro
    #       - public_files:/var/www/html/web/files:ro
    #       - gen_src:/var/www/html/app/gen-src:ro

networks:
    frontproxynet:
        external: true
    # If you need to use port forwarding, fixing default gateway can be useful
    # to keep same host IP address between service restarts
    default:
        ipam:
            driver: default
            config:
                -   subnet: ${DEFAULT_GATEWAY}/16

volumes:
    app_config:
    private_files:
    public_files:
    assets_files:
    gen_src:
    proxies:
    compiled:
    db_data:
    solr_data:
